name: Deploy Backend to Coolify

on:
  push:
    branches:
      - main
    paths:
      - 'front/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Trigger Deployment and Get Deployment UUID
        id: trigger
        run: |
          RESPONSE_JSON=$(curl -s --header "Authorization: Bearer ${{ secrets.COOLIFY_API_TOKEN }}" "${{ secrets.COOLIFY_FRONT_DEPLOY_HOOK }}")
          
          if echo "$RESPONSE_JSON" | jq -e 'has("error")' > /dev/null; then
            echo "Error triggering deployment:"
            echo "$RESPONSE_JSON" | jq
            exit 1
          fi

          DEPLOYMENT_UUID=$(echo "$RESPONSE_JSON" | jq -r '.deployments[0].deployment_uuid')
          
          if [ -z "$DEPLOYMENT_UUID" ] || [ "$DEPLOYMENT_UUID" == "null" ]; then
            echo "Could not find deployment_uuid in the server response."
            echo "Response was: $RESPONSE_JSON"
            exit 1
          fi

          echo "deployment_uuid=$DEPLOYMENT_UUID" >> $GITHUB_OUTPUT
          
      - name: 2. Wait for Deployment to Finish
        run: |
          DEPLOYMENT_UUID="${{ steps.trigger.outputs.deployment_uuid }}"
          TIMEOUT_MINUTES=10
          SLEEP_SECONDS=15
          MAX_ATTEMPTS=$((TIMEOUT_MINUTES * 60 / SLEEP_SECONDS))

          echo "Waiting for deployment ${DEPLOYMENT_UUID} to complete..."

          for (( i=1; i<=MAX_ATTEMPTS; i++ )); do
            STATUS_URL="${{secrets.COOLIFY_API_URL}}/api/v1/deployments/${DEPLOYMENT_UUID}"
            STATUS_RESPONSE=$(curl -s --header "Authorization: Bearer ${{ secrets.COOLIFY_API_TOKEN }}" "$STATUS_URL")
            STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')

            echo "Attempt $i/$MAX_ATTEMPTS: Current status is '${STATUS}'"

            if [[ "$STATUS" == "finished" ]]; then
              echo "✅ Deployment finished successfully!"
              exit 0
            elif [[ "$STATUS" == "failed" || "$STATUS" == "canceled" ]]; then
              echo "❌ Deployment failed with status: ${STATUS}"
              exit 1
            fi
            
            sleep $SLEEP_SECONDS
          done

          echo "❌ Timeout: Deployment did not finish within ${TIMEOUT_MINUTES} minutes."
          exit 1